services:
  # ==================================================
  # HAProxy Load Balancer
  # ==================================================
  load-balancer:
    image: haproxy:2.8-alpine
    container_name: load-balancer
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - backend
    depends_on:
      - task-service
      - voting-service
      - user_service
      - game_service
      - townservice
      - characterservice
      - rumors-service
    restart: unless-stopped
    ports:
      - "8404:8404" # HAProxy stats page

  # ==================================================
  # ELK Stack + Filebeat setup
  # ==================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.0
    container_name: logstash
    depends_on:
      - elasticsearch
    volumes:
      - ./elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - backend
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - backend
    restart: unless-stopped

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.15.0
    container_name: filebeat
    user: root
    command: ["--strict.perms=false"]
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./elk/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - filebeat_data:/usr/share/filebeat/data
    depends_on:
      - logstash
    networks:
      - backend
    restart: unless-stopped

  # ==================================================
  # Gateway + Cache
  # ==================================================
  gateway:
    build: .
    container_name: gateway_container
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      TASK_SERVICE_URL: http://task-service:8180
      VOTING_SERVICE_URL: http://voting-service:8181
      GAME_SERVICE_URL: http://game_service:3005
      USER_SERVICE_URL: http://user_service:3000
      RUMORS_SERVICE_URL: http://rumors-service:8081
      JWT_SECRET: ${JWT_SECRET}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      TOWN_SERVICE_URL: http://townservice:4001
      CHARACTER_SERVICE_URL: http://characterservice:4002
      SHOP_SERVICE_URL: http://shopservice:80
      ROLEPLAY_SERVICE_URL: http://roleplayservice:8086
      CACHE_URL: redis://gateway_cache:6379
      CACHE_DEFAULT_TTL: 15
      INTERNAL_SERVICE_TOKEN: ${INTERNAL_SERVICE_TOKEN}
    depends_on:
      - gateway_cache
      - load-balancer
    networks:
      - backend

  gateway_cache:
    image: redis:7
    container_name: gateway_cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - backend

  # ==================================================
  # MongoDB Services
  # ==================================================
  mongo:
    image: mongo:6
    container_name: mongo_container
    restart: unless-stopped
    volumes:
      - mongo_data:/data/db
    networks:
      - backend

  mongo-town:
    image: mongo:6
    container_name: mongo-town
    restart: unless-stopped
    ports:
      - "27019:27017"
    volumes:
      - mongo-town-data:/data/db
    networks:
      - backend

  mongo-character:
    image: mongo:6
    container_name: mongo-character
    restart: unless-stopped
    ports:
      - "27018:27017"
    volumes:
      - mongo-character-data:/data/db
    networks:
      - backend

  # ==================================================
  # Microservices (User, Game, Town, Character)
  # ==================================================
  user_service:
    image: nadea39/user-management-service:1.7
    container_name: user_service_container
    environment:
      - MONGO_URI=${MONGO_URI_USER}
      - USE_MOCKS=true
      - PORT=3000
      - GAME_SERVICE_URL=${GAME_SERVICE_URL}
    ports:
      - "3000:3000"
    depends_on:
      - mongo
    networks:
      - backend
    env_file:
      - .env

  game_service:
    image: nadea39/gameservice:v1.0.5
    container_name: gameservice_container
    environment:
      - MONGO_URI=${MONGO_URI_GAME}
      - PORT=${PORT}
      - NODE_ENV=${NODE_ENV}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
    ports:
      - "3005:3005"
    depends_on:
      - mongo
      - user_service
    networks:
      - backend

  townservice:
    image: livia994/townservice:3.0
    container_name: townservice
    restart: unless-stopped
    ports:
      - "4001:4001"
    environment:
      - MONGO_URI=mongodb://mongo-town:27017/townDB
      - PORT=4001
      - NODE_ENV=production
    depends_on:
      - mongo-town
      - db_town_populator
    networks:
      - backend

  db_town_populator:
    image: livia994/townservice:3.0
    container_name: town_db_populator
    command: ["node", "src/db/seed/town-seed.js"]
    environment:
      - MONGO_URI=mongodb://mongo-town:27017/townDB
    depends_on:
      - mongo-town
    networks:
      - backend
    restart: "no"

  characterservice:
    image: livia994/characterservice:1.10
    container_name: characterservice
    restart: unless-stopped
    ports:
      - "4002:4002"
    environment:
      - MONGO_URI=mongodb://mongo-character:27017/characterDB
      - PORT=4002
      - NODE_ENV=production
    depends_on:
      - mongo-character
      - db_character_populator
    networks:
      - backend

  db_character_populator:
    image: livia994/characterservice:1.10
    container_name: character_db_populator
    command: ["node", "src/db/seed/character-seed.js"]
    environment:
      - MONGO_URI=mongodb://mongo-character:27017/characterDB
    depends_on:
      - mongo-character
    networks:
      - backend
    restart: "no"

  # ==================================================
  # Postgres Databases (Voting, Task, Shop, Roleplay, Rumors)
  # ==================================================
  postgres-voting:
    container_name: postgres-voting
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: voting_service
      PGDATA: /data/postgres
    volumes:
      - postgres-voting:/data/postgres
    ports:
      - "5442:5432"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 5
      timeout: 5s

  postgres-task:
    container_name: postgres-task
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: task_service
      PGDATA: /data/postgres
    volumes:
      - postgres-task:/data/postgres
    ports:
      - "5443:5432"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 5
      timeout: 5s

  postgres-shop:
    image: postgres:15
    container_name: postgres-shop
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB_SHOP}
      POSTGRES_USER: ${POSTGRES_USER_SHOP}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_SHOP}
    volumes:
      - pad_shop-postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend

  postgres-rumors:
    container_name: postgres-rumors
    image: postgres:15
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "rumors_service"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-rumors:/var/lib/postgresql/data/pgdata
    ports:
      - "5434:5432"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d rumors_service"]
      interval: 5s
      retries: 5
      timeout: 5s

  # ==================================================
  # Spring Services
  # ==================================================
  voting-service:
    image: vladamusin/voting_service:0.0.4
    container_name: voting-service
    ports:
      - "8181:8181"
    depends_on:
      postgres-voting:
        condition: service_healthy
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-voting:5432/voting_service
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    restart: unless-stopped

  task-proxy:
    image: nginx:alpine
    container_name: task-proxy
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/templates/nginx.conf.template:ro
    environment:
      INTERNAL_SERVICE_TOKEN: ${INTERNAL_SERVICE_TOKEN}
    networks:
      - backend
    depends_on:
      - gateway
    restart: unless-stopped

  task-service:
    image: vladamusin/task_service:0.0.11
    container_name: task-service
    ports:
      - "8180:8180"
    depends_on:
      postgres-task:
        condition: service_healthy
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-task:5432/task_service
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      CHARACTER_SERVICE_URL: http://task-proxy:8000
    restart: unless-stopped

  rumors-service:
    image: "${RUMORS_IMAGE}"
    container_name: rumors-service
    ports:
      - "${RUMORS_PORT}:8081"
    depends_on:
      postgres-rumors:
        condition: service_healthy
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-rumors:5432/rumors_service
      SPRING_DATASOURCE_USERNAME: "${POSTGRES_USER}"
      SPRING_DATASOURCE_PASSWORD: "${POSTGRES_PASSWORD}"
    restart: unless-stopped

  communication-service:
    image: "${COMM_IMAGE}"
    container_name: communication-service
    ports:
      - "${COMM_PORT}:8080"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 6

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    networks:
      - backend
    restart: unless-stopped

  # ==================================================
  # SHOP + ROLEPLAY SERVICES
  # ==================================================
  shopservice:
    build:
      context: ./Shop-Service/src/ShopApi
      dockerfile: Dockerfile
    container_name: shopservice
    restart: always
    depends_on:
      - postgres-shop
      - gateway_cache
      - characterservice
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      ConnectionStrings__DefaultConnection: "Host=postgres-shop;Port=5432;Database=${POSTGRES_DB_SHOP};Username=${POSTGRES_USER_SHOP};Password=${POSTGRES_PASSWORD_SHOP}"
      CHARACTER_SERVICE_URL: http://characterservice:4002
      REDIS__CONFIG: gateway_cache:6379
      CACHE_DEFAULT_TTL: 15
    ports:
      - "${SHOP_SERVICE_PORT}:80"
    networks:
      - backend

  roleplayservice:
    build:
      context: ./Roleplay-Service/src/RoleplayApi
    container_name: roleplayservice
    restart: always
    depends_on:
      - gateway_cache
      - characterservice
      - game_service
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8086
      CharacterServiceUrl: http://characterservice:4002
      GameServiceUrl: http://game_service:3005
      Redis__Config: gateway_cache:6379
      CacheDefaultTtl: 15
    ports:
      - "8086:8086"
    networks:
      - backend

# ==================================================
# NETWORKS & VOLUMES
# ==================================================
networks:
  backend:
    driver: bridge

volumes:
  elasticsearch_data:
    driver: local
  filebeat_data:
    driver: local
  mongo_data:
  mongo-town-data:
  mongo-character-data:
  postgres-voting:
  postgres-task:
  postgres-rumors:
  pad_shop-postgres-data:
  shop-postgres-data:
  roleplay-postgres-data:
