version: '3.8'

services:
  
  service_discovery:
    image: nadea39/service-discovery:v1.2.0
    container_name: service_discovery_container
    ports:
      - "8500:8500"
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - game_network

  notifications:
    image: nadea39/notification-service:v1.0.0
    container_name: notifications_container
    ports:
      - "8600:8600"
    environment:
      - PYTHONUNBUFFERED=1
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - SERVICE_DISCOVERY_URL=http://service_discovery:8500
    networks:
      - game_network

  load-balancer:
    image: haproxy:2.8-alpine
    container_name: load-balancer
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - game_network
    depends_on:
      - task-service
      - voting-service
      - user_service
      - game_service
      - town_service
      - characters_service
      - rumors-service
    restart: unless-stopped
    ports:
      - "8404:8404"  # HAProxy stats page

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - game_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.0
    container_name: logstash
    depends_on:
      - elasticsearch
    volumes:
      - ./elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5044:5044" # Filebeat input
      - "9600:9600" # Logstash monitoring API
    networks:
      - game_network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - game_network
    restart: unless-stopped

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.15.0
    container_name: filebeat
    user: root
    command: ["--strict.perms=false"]
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./elk/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - filebeat_data:/usr/share/filebeat/data
    depends_on:
      - logstash
    networks:
      - game_network
    restart: unless-stopped

  mongo:
    image: mongo:6
    container_name: mongo_container
    restart: unless-stopped
    volumes:
      - mongo_data:/data/db
    networks:
      - game_network

  postgres-shop:
    image: postgres:15-alpine
    container_name: postgres_shop_container
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB_SHOP}
      - POSTGRES_USER=${POSTGRES_USER_SHOP}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_SHOP}
    volumes:
      - postgres_shop_data:/var/lib/postgresql/data
    networks:
      - game_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_SHOP}"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-rumors:
    image: postgres:15
    container_name: postgres_rumors_container
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER_RUMORS}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_RUMORS}
      - POSTGRES_DB=${POSTGRES_DB_RUMORS}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_rumors_data:/var/lib/postgresql/data/pgdata
    networks:
      - game_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_RUMORS} -d ${POSTGRES_DB_RUMORS}"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-voting:
    container_name: postgres-voting
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: voting_service
      PGDATA: /data/postgres
    volumes:
      - postgres-voting:/data/postgres
    ports:
      - "5442:5432"
    networks:
      - game_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 5
      timeout: 5s

  postgres-task:
    container_name: postgres-task
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: task_service
      PGDATA: /data/postgres
    volumes:
      - postgres-task:/data/postgres
    ports:
      - "5443:5432"
    networks:
      - game_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 5
      timeout: 5s

  postgres-roleplay:
    image: postgres:15
    container_name: postgres-roleplay
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB_ROLEPLAY}
      POSTGRES_USER: ${POSTGRES_USER_ROLEPLAY}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_ROLEPLAY}
    volumes:
      - postgres_roleplay_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - game_network

  redis:
    image: redis:7-alpine
    container_name: redis_container
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - game_network

  user_service:
    image: nadea39/user-management-service:1.8
    deploy:
      replicas: 2
    environment:
      - MONGO_URI=${MONGO_URI_USER}
      - USE_MOCKS=true
      - PORT=3000
      - SERVICE_DISCOVERY_URL=http://service_discovery:8500
    depends_on:
      - mongo
      - service_discovery
    networks:
      - game_network
    env_file:
      - .env

  game_service:
    image: nadea39/gameservice:v1.0.7
    deploy:
      replicas: 2
    environment:
      - MONGO_URI=${MONGO_URI_GAME}
      - PORT=3005
      - NODE_ENV=${NODE_ENV}
      - USER_SERVICE_URL=http://user_service:3000
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - SERVICE_DISCOVERY_URL=http://service_discovery:8500
    depends_on:
      - mongo
      - user_service
      - service_discovery
    networks:
      - game_network

  town_service:
    image: livia994/townservice:latest
    deploy:
      replicas: 2
    depends_on:
      - service_discovery
      - mongo
    environment:
      - SERVICE_DISCOVERY_URL=http://service_discovery:8500
      - MONGO_URI=mongodb://mongo:27017/townDB
      - PORT=4001
    networks:
      - game_network

  characters_service:
    image: livia994/characterservice:latest
    deploy:
      replicas: 2
    depends_on:
      - service_discovery
      - mongo
    environment:
      - SERVICE_DISCOVERY_URL=http://service_discovery:8500
      - MONGO_URI=mongodb://mongo:27017/characterDB
      - PORT=4002
    networks:
      - game_network

  shop_service:
    image: catalinaernu/shop-service:latest
    deploy:
      replicas: 2
    restart: always
    depends_on:
      postgres-shop:
        condition: service_healthy
      redis:
        condition: service_started
      characters_service:
        condition: service_started
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres-shop;Port=5432;Database=${POSTGRES_DB_SHOP};Username=${POSTGRES_USER_SHOP};Password=${POSTGRES_PASSWORD_SHOP}
      - CHARACTER_SERVICE_URL=http://characters_service:4002
      - REDIS__CONFIG=redis:6379
      - CACHE_DEFAULT_TTL=15
      - SERVICE_NAME=shop-service
      - PORT=80
      - SERVICE_DISCOVERY_URL=http://service_discovery:8500
    env_file:
      - .env
    networks:
      - game_network

  roleplay_service:
    image: catalinaernu/roleplay-service:latest
    deploy:
      replicas: 2
    restart: always
    depends_on:
      postgres-roleplay:
        condition: service_started
      redis:
        condition: service_started
      characters_service:
        condition: service_started
      game_service:
        condition: service_started
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8086
      - ConnectionStrings__DefaultConnection=Host=postgres-roleplay;Port=5432;Database=${POSTGRES_DB_ROLEPLAY};Username=${POSTGRES_USER_ROLEPLAY};Password=${POSTGRES_PASSWORD_ROLEPLAY}
      - CharacterServiceUrl=http://characters_service:4002
      - GameServiceUrl=http://game_service:3005
      - Redis__Config=redis:6379
      - CacheDefaultTtl=15
      - SERVICE_NAME=roleplay-service
      - PORT=8086
      - SERVICE_DISCOVERY_URL=http://service_discovery:8500
    networks:
      - game_network

  voting-service:
    image: vladamusin/voting_service:0.0.4
    deploy:
      replicas: 2
    depends_on:
      postgres-voting:
        condition: service_healthy
    networks:
      - game_network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-voting:5432/voting_service
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    restart: unless-stopped

  task-proxy:
    image: nginx:alpine
    container_name: task-proxy
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/templates/nginx.conf.template:ro
    environment:
      INTERNAL_SERVICE_TOKEN: ${INTERNAL_SERVICE_TOKEN}
    networks:
      - game_network
    depends_on:
      - gateway
    restart: unless-stopped

  task-service:
    image: vladamusin/task_service:0.0.13
    deploy:
      replicas: 2
    depends_on:
      postgres-task:
        condition: service_healthy
    networks:
      - game_network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-task:5432/task_service
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      CHARACTER_SERVICE_URL: http://task-proxy:8000
    restart: unless-stopped

  #  communication-service:
#    image: "${COMM_IMAGE}"
##    container_name: communication-service
##    ports:
##      - "${COMM_PORT}:8080"
#    networks:
#      - backend
#    restart: unless-stopped
#    # optional healthcheck to ensure app started (adjust path if you have /actuator/health)
#    healthcheck:
#      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
#      interval: 10s
#      timeout: 5s
#      retries: 6


  rumors-service:
    image: "${RUMORS_IMAGE}"
#    container_name: rumors-service
#    ports:
#      - "${RUMORS_PORT}:8081"
    deploy:
      replicas: 2
    depends_on:
      postgres-rumors:
        condition: service_healthy
      communication-service:
        condition: service_started
    networks:
      - game_network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-rumors:5432/${POSTGRES_DB_RUMORS}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER_RUMORS}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD_RUMORS}
      SERVICE_DISCOVERY_URL: http://service_discovery:8500
      COMMUNICATION_SERVICE_URL: http://communication-service:8080
      PORT: 8081
    restart: unless-stopped **/


  gateway:
    image: nadea39/gateway:v1.0.9
    container_name: gateway_container
    environment:
      - SERVICE_DISCOVERY_URL=http://service_discovery:8500
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - CACHE_URL=redis://redis:6379
      - PORT=8000
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
    ports:
      - "8080:8000"
    depends_on:
      - game_service
      - user_service
      - redis
      - service_discovery
      - load-balancer
    networks:
      - game_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_container
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    networks:
      - game_network
    restart: unless-stopped

volumes:
  elasticsearch_data:
  filebeat_data:
  mongo_data:
  postgres_shop_data:
  postgres_rumors_data:
  postgres-voting:
  postgres-task:
  postgres_roleplay_data:

networks:
  game_network:
    driver: bridge